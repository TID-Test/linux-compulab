#!/bin/sh
# SPDX-License-Identifier: GPL-2.0

#
# buildcpl 0.0.1
#
# (C) 2024 by CompuLab LTD.
#
# This script is used to compile a tarball from the currently
# prepared kernel. Based upon the builddeb script from
#

set -e

#
# Some variables and settings used throughout the script
#
tmpdir="${objtree}/tar-install"
tarball="${objtree}/linux-compulab-${KERNELRELEASE}-${ARCH}.tar"


#
# Figure out how to compress, if requested at all
#
case "${1}" in
	cpl-targz-pkg)
		opts="-I ${KGZIP}"
		tarball=${tarball}.gz
		;;
	cpl-tarbz2-pkg)
		opts="-I ${KBZIP2}"
		tarball=${tarball}.bz2
		;;
	cpl-tarxz-pkg)
		opts="-I ${XZ}"
		tarball=${tarball}.xz
		;;
	cpl-tarzst-pkg)
		opts="-I ${ZSTD}"
		tarball=${tarball}.zst
		;;
	*)
		echo "Unknown tarball target \"${1}\" requested, please add it to ${0}." >&2
		exit 1
		;;
esac


#
# Clean-up and re-create the temporary directory
#
rm -rf -- "${tmpdir}"
mkdir -p -- "${tmpdir}/boot"
dirs=boot


#
# Try to install dtbs
#
if grep -q '^CONFIG_OF_EARLY_FLATTREE=y' include/config/auto.conf; then
	# Only some architectures with OF support have this target
	if [ -d "${srctree}/arch/${SRCARCH}/boot/dts" ]; then
		$MAKE ARCH="${ARCH}" -f ${srctree}/Makefile INSTALL_DTBS_PATH="${tmpdir}/boot/dtbs/${KERNELRELEASE}" dtbs_install
		mkdir -p mkdir ${tmpdir}/boot/efi/${KERNELRELEASE}
		cp -v ${tmpdir}/boot/dtbs/${KERNELRELEASE}/compulab/*.* ${tmpdir}/boot/efi/${KERNELRELEASE}/
		rm -rf ${tmpdir}/boot/dtbs
    fi
fi


#
# Try to install modules
#
if grep -q '^CONFIG_MODULES=y' include/config/auto.conf; then
	make ARCH="${ARCH}" -f ${srctree}/Makefile INSTALL_MOD_PATH="${tmpdir}" modules_install
	dirs="$dirs lib"
fi


#
# Install basic kernel files
#
cp -v -- "${objtree}/System.map" "${tmpdir}/boot/System.map-${KERNELRELEASE}"
cp -v -- "${KCONFIG_CONFIG}" "${tmpdir}/boot/config-${KERNELRELEASE}"
cp -v -- "${objtree}/vmlinux" "${tmpdir}/boot/vmlinux-${KERNELRELEASE}"


#
# Install arch-specific kernel image(s)
#
case "${ARCH}" in
	arm64)
		for i in Image.bz2 Image.gz Image.lz4 Image.lzma Image.lzo ; do
			if [ -f "${objtree}/arch/arm64/boot/${i}" ] ; then
				cp -v -- "${objtree}/arch/arm64/boot/${i}" "${tmpdir}/boot/vmlinuz-${KERNELRELEASE}"
				break
			fi
		done
		for i in Image; do
			if [ -f "${objtree}/arch/arm64/boot/${i}" ] ; then
				mkdir -p ${tmpdir}/boot/efi/${KERNELRELEASE}
				cp -v -- "${objtree}/arch/arm64/boot/${i}" "${tmpdir}/boot/efi/${KERNELRELEASE}/"
				cp -v -- "${objtree}/arch/arm64/boot/${i}" "${tmpdir}/boot/vmlinux-${KERNELRELEASE}"
				break
			fi
		done
		;;
	*)
		[ -f "${KBUILD_IMAGE}" ] && cp -v -- "${KBUILD_IMAGE}" "${tmpdir}/boot/vmlinux-kbuild-${KERNELRELEASE}"
		echo "" >&2
		echo '** ** **  WARNING  ** ** **' >&2
		echo "" >&2
		echo "Your architecture did not define any architecture-dependent files" >&2
		echo "to be placed into the tarball. Please add those to ${0} ..." >&2
		echo "" >&2
		sleep 5
		;;
esac

if [ "${1}" = dir-pkg ]; then
	echo "Kernel tree successfully created in $tmpdir"
	exit 0
fi

#
# Create the tarball
#
if tar --owner=root --group=root --help >/dev/null 2>&1; then
	opts="$opts --owner=root --group=root"
fi

tar cf $tarball -C $tmpdir $opts $dirs

echo "Tarball successfully created in $tarball"

exit 0
